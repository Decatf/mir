/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from xdg-shell.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#include <experimental/optional>
#include <boost/throw_exception.hpp>
#include <boost/exception/diagnostic_information.hpp>

#include "xdg-shell_wrapper.h"

#include "mir/fd.h"
#include "mir/log.h"

namespace mfw = mir::frontend::wayland;

// XdgWmBase

mfw::XdgWmBase::XdgWmBase(struct wl_display* display, uint32_t max_version)
    : global{wl_global_create(display, &xdg_wm_base_interface, max_version, this, &XdgWmBase::bind_thunk)},
      max_version{max_version}
{
    if (global == nullptr)
    {
        BOOST_THROW_EXCEPTION((std::runtime_error{
            "Failed to export xdg_wm_base interface"}));
    }
}

mfw::XdgWmBase::~XdgWmBase()
{
    wl_global_destroy(global);
}

struct xdg_wm_base_interface const mfw::XdgWmBase::vtable = {
    destroy_thunk,
    create_positioner_thunk,
    get_xdg_surface_thunk,
    pong_thunk};

// XdgPositioner

mfw::XdgPositioner::XdgPositioner(struct wl_client* client, struct wl_resource* parent, uint32_t id)
    : client{client},
      resource{wl_resource_create(client, &xdg_positioner_interface, wl_resource_get_version(parent), id)}
{
    if (resource == nullptr)
    {
        wl_resource_post_no_memory(parent);
        BOOST_THROW_EXCEPTION((std::bad_alloc{}));
    }
    wl_resource_set_implementation(resource, &vtable, this, &resource_destroyed_thunk);
}

struct xdg_positioner_interface const mfw::XdgPositioner::vtable = {
    destroy_thunk,
    set_size_thunk,
    set_anchor_rect_thunk,
    set_anchor_thunk,
    set_gravity_thunk,
    set_constraint_adjustment_thunk,
    set_offset_thunk};

// XdgSurface

mfw::XdgSurface::XdgSurface(struct wl_client* client, struct wl_resource* parent, uint32_t id)
    : client{client},
      resource{wl_resource_create(client, &xdg_surface_interface, wl_resource_get_version(parent), id)}
{
    if (resource == nullptr)
    {
        wl_resource_post_no_memory(parent);
        BOOST_THROW_EXCEPTION((std::bad_alloc{}));
    }
    wl_resource_set_implementation(resource, &vtable, this, &resource_destroyed_thunk);
}

struct xdg_surface_interface const mfw::XdgSurface::vtable = {
    destroy_thunk,
    get_toplevel_thunk,
    get_popup_thunk,
    set_window_geometry_thunk,
    ack_configure_thunk};

// XdgToplevel

mfw::XdgToplevel::XdgToplevel(struct wl_client* client, struct wl_resource* parent, uint32_t id)
    : client{client},
      resource{wl_resource_create(client, &xdg_toplevel_interface, wl_resource_get_version(parent), id)}
{
    if (resource == nullptr)
    {
        wl_resource_post_no_memory(parent);
        BOOST_THROW_EXCEPTION((std::bad_alloc{}));
    }
    wl_resource_set_implementation(resource, &vtable, this, &resource_destroyed_thunk);
}

struct xdg_toplevel_interface const mfw::XdgToplevel::vtable = {
    destroy_thunk,
    set_parent_thunk,
    set_title_thunk,
    set_app_id_thunk,
    show_window_menu_thunk,
    move_thunk,
    resize_thunk,
    set_max_size_thunk,
    set_min_size_thunk,
    set_maximized_thunk,
    unset_maximized_thunk,
    set_fullscreen_thunk,
    unset_fullscreen_thunk,
    set_minimized_thunk};

// XdgPopup

mfw::XdgPopup::XdgPopup(struct wl_client* client, struct wl_resource* parent, uint32_t id)
    : client{client},
      resource{wl_resource_create(client, &xdg_popup_interface, wl_resource_get_version(parent), id)}
{
    if (resource == nullptr)
    {
        wl_resource_post_no_memory(parent);
        BOOST_THROW_EXCEPTION((std::bad_alloc{}));
    }
    wl_resource_set_implementation(resource, &vtable, this, &resource_destroyed_thunk);
}

struct xdg_popup_interface const mfw::XdgPopup::vtable = {
    destroy_thunk,
    grab_thunk};
