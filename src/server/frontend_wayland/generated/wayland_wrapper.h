/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from wayland.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_WAYLAND_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_WAYLAND_XML_WRAPPER

#include <experimental/optional>
#include <boost/throw_exception.hpp>
#include <boost/exception/diagnostic_information.hpp>

#include "wayland.h"

#include "mir/fd.h"
#include "mir/log.h"

namespace mir
{
namespace frontend
{
namespace wayland
{

class Callback
{
protected:
    Callback(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Callback() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
};

class Compositor
{
protected:
    Compositor(struct wl_display* display, uint32_t max_version);
    virtual ~Compositor();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void create_surface(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;
    virtual void create_region(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;

    static struct wl_compositor_interface const vtable;
};

class ShmPool
{
protected:
    ShmPool(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~ShmPool() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void create_buffer(uint32_t id, int32_t offset, int32_t width, int32_t height, int32_t stride, uint32_t format) = 0;
    virtual void destroy() = 0;
    virtual void resize(int32_t size) = 0;

    static struct wl_shm_pool_interface const vtable;
};

class Shm
{
protected:
    Shm(struct wl_display* display, uint32_t max_version);
    virtual ~Shm();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void create_pool(struct wl_client* client, struct wl_resource* resource, uint32_t id, mir::Fd fd, int32_t size) = 0;

    static struct wl_shm_interface const vtable;
};

class Buffer
{
protected:
    Buffer(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Buffer() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void destroy() = 0;

    static struct wl_buffer_interface const vtable;
};

class DataOffer
{
protected:
    DataOffer(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~DataOffer() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void accept(uint32_t serial, std::experimental::optional<std::string> const& mime_type) = 0;
    virtual void receive(std::string const& mime_type, mir::Fd fd) = 0;
    virtual void destroy() = 0;
    virtual void finish() = 0;
    virtual void set_actions(uint32_t dnd_actions, uint32_t preferred_action) = 0;

    static struct wl_data_offer_interface const vtable;
};

class DataSource
{
protected:
    DataSource(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~DataSource() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void offer(std::string const& mime_type) = 0;
    virtual void destroy() = 0;
    virtual void set_actions(uint32_t dnd_actions) = 0;

    static struct wl_data_source_interface const vtable;
};

class DataDevice
{
protected:
    DataDevice(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~DataDevice() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void start_drag(std::experimental::optional<struct wl_resource*> const& source, struct wl_resource* origin, std::experimental::optional<struct wl_resource*> const& icon, uint32_t serial) = 0;
    virtual void set_selection(std::experimental::optional<struct wl_resource*> const& source, uint32_t serial) = 0;
    virtual void release() = 0;

    static struct wl_data_device_interface const vtable;
};

class DataDeviceManager
{
protected:
    DataDeviceManager(struct wl_display* display, uint32_t max_version);
    virtual ~DataDeviceManager();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void create_data_source(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;
    virtual void get_data_device(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* seat) = 0;

    static struct wl_data_device_manager_interface const vtable;
};

class Shell
{
protected:
    Shell(struct wl_display* display, uint32_t max_version);
    virtual ~Shell();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void get_shell_surface(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* surface) = 0;

    static struct wl_shell_interface const vtable;
};

class ShellSurface
{
protected:
    ShellSurface(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~ShellSurface() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void pong(uint32_t serial) = 0;
    virtual void move(struct wl_resource* seat, uint32_t serial) = 0;
    virtual void resize(struct wl_resource* seat, uint32_t serial, uint32_t edges) = 0;
    virtual void set_toplevel() = 0;
    virtual void set_transient(struct wl_resource* parent, int32_t x, int32_t y, uint32_t flags) = 0;
    virtual void set_fullscreen(uint32_t method, uint32_t framerate, std::experimental::optional<struct wl_resource*> const& output) = 0;
    virtual void set_popup(struct wl_resource* seat, uint32_t serial, struct wl_resource* parent, int32_t x, int32_t y, uint32_t flags) = 0;
    virtual void set_maximized(std::experimental::optional<struct wl_resource*> const& output) = 0;
    virtual void set_title(std::string const& title) = 0;
    virtual void set_class(std::string const& class_) = 0;

    static struct wl_shell_surface_interface const vtable;
};

class Surface
{
protected:
    Surface(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Surface() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void destroy() = 0;
    virtual void attach(std::experimental::optional<struct wl_resource*> const& buffer, int32_t x, int32_t y) = 0;
    virtual void damage(int32_t x, int32_t y, int32_t width, int32_t height) = 0;
    virtual void frame(uint32_t callback) = 0;
    virtual void set_opaque_region(std::experimental::optional<struct wl_resource*> const& region) = 0;
    virtual void set_input_region(std::experimental::optional<struct wl_resource*> const& region) = 0;
    virtual void commit() = 0;
    virtual void set_buffer_transform(int32_t transform) = 0;
    virtual void set_buffer_scale(int32_t scale) = 0;
    virtual void damage_buffer(int32_t x, int32_t y, int32_t width, int32_t height) = 0;

    static struct wl_surface_interface const vtable;
};

class Seat
{
protected:
    Seat(struct wl_display* display, uint32_t max_version);
    virtual ~Seat();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void get_pointer(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;
    virtual void get_keyboard(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;
    virtual void get_touch(struct wl_client* client, struct wl_resource* resource, uint32_t id) = 0;
    virtual void release(struct wl_client* client, struct wl_resource* resource) = 0;

    static struct wl_seat_interface const vtable;
};

class Pointer
{
protected:
    Pointer(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Pointer() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void set_cursor(uint32_t serial, std::experimental::optional<struct wl_resource*> const& surface, int32_t hotspot_x, int32_t hotspot_y) = 0;
    virtual void release() = 0;

    static struct wl_pointer_interface const vtable;
};

class Keyboard
{
protected:
    Keyboard(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Keyboard() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void release() = 0;

    static struct wl_keyboard_interface const vtable;
};

class Touch
{
protected:
    Touch(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Touch() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void release() = 0;

    static struct wl_touch_interface const vtable;
};

class Output
{
protected:
    Output(struct wl_display* display, uint32_t max_version);
    virtual ~Output();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void release(struct wl_client* client, struct wl_resource* resource) = 0;

    static struct wl_output_interface const vtable;
};

class Region
{
protected:
    Region(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Region() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void destroy() = 0;
    virtual void add(int32_t x, int32_t y, int32_t width, int32_t height) = 0;
    virtual void subtract(int32_t x, int32_t y, int32_t width, int32_t height) = 0;

    static struct wl_region_interface const vtable;
};

class Subcompositor
{
protected:
    Subcompositor(struct wl_display* display, uint32_t max_version);
    virtual ~Subcompositor();

    struct wl_global* const global;
    uint32_t const max_version;

private:
    struct Thunks;

    virtual void bind(struct wl_client* client, struct wl_resource* resource) { (void)client; (void)resource; }

    virtual void destroy(struct wl_client* client, struct wl_resource* resource) = 0;
    virtual void get_subsurface(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* surface, struct wl_resource* parent) = 0;

    static struct wl_subcompositor_interface const vtable;
};

class Subsurface
{
protected:
    Subsurface(struct wl_client* client, struct wl_resource* parent, uint32_t id);
    virtual ~Subsurface() = default;

    struct wl_client* const client;
    struct wl_resource* const resource;

private:
    struct Thunks;

    virtual void destroy() = 0;
    virtual void set_position(int32_t x, int32_t y) = 0;
    virtual void place_above(struct wl_resource* sibling) = 0;
    virtual void place_below(struct wl_resource* sibling) = 0;
    virtual void set_sync() = 0;
    virtual void set_desync() = 0;

    static struct wl_subsurface_interface const vtable;
};

}
}
}

#endif // MIR_FRONTEND_WAYLAND_WAYLAND_XML_WRAPPER
